local Map = require "main/game/map"
local Landscape = require "main/game/landscape"
local Building = require "main/game/building"

local function normalize_resources(self, resources)
	local norm = {
		food = 0,
		wood = 0,
		stone = 0
	}
	if resources == nil then
		return norm
	end
	if resources.food ~= nil then
		norm.food = resources.food
	end
	if resources.wood ~= nil then
		norm.wood = resources.wood
	end
	if resources.stone ~= nil then
		norm.stone = resources.stone
	end
	return norm
end

local function invert_resources(self, resources)
	return {
		food = -resources.food,
		wood = -resources.wood,
		stone = -resources.stone
	}
end

local function update_resources(self, resources)
	norm = normalize_resources(self, resources)
	self.resources.food = self.resources.food + norm.food
	self.resources.wood = self.resources.wood + norm.wood
	self.resources.stone = self.resources.stone + norm.stone
	msg.post("gui", hash("update_resources"), self.resources)
end

local function spend_resources(self, resources)
	norm = normalize_resources(self, resources)
	inv = invert_resources(self, norm)
	update_resources(self, inv)
end

local function check_cost(self, resources)
	norm = normalize_resources(self, resources)
	if norm.food > self.resources.food then
		return false
	end
	if norm.wood > self.resources.wood then
		return false
	end
	if norm.stone > self.resources.stone then
		return false
	end
	return true
end

local function lose_game(self)
	print("you lose")
end

local function enemy_turn(self)
	for barbarian_hex in Map.iterate() do
		if barbarian_hex.unit ~= nil and barbarian_hex.unit.type == "barbarians" and barbarian_hex.unit.action then
			if barbarian_hex.x == 0 and barbarian_hex.y == 0 then
				lose_game(self)
				break
			end
			local hex_priority = {}
			for hex in Map.iterate() do
				hex_priority[hex] = 0
			end
			for hex in Map.iterate() do
				if hex.visible and (hex.unit == nil or hex.unit.type == "workers") then
					local priority = 0
					if hex.building ~= nil then
						priority = priority + hex.building.importance
					end
					if hex.unit ~= nil and hex.unit.type == "workers" then
						priority = priority + 4
					end
					for other_hex in Map.iterate() do
						hex_priority[other_hex] = hex_priority[other_hex] + priority / (Map.distance(hex, other_hex) + 1)
					end
				end
			end
			local max_priority = -1
			local candidates = {}
			local candidates_l = 0
			for hex in Map.iterate() do
				if hex.visible and (hex.unit == nil or hex.unit.type == 'workers') and Map.distance(hex, barbarian_hex) == 1 then
					if hex_priority[hex] > max_priority then
						candidates = {}
						max_priority = hex_priority[hex]
						table.insert(candidates, hex)
						candidates_l = 1
					elseif hex_priority[hex] == max_priority then
						table.insert(candidates, hex)
						candidates_l = candidates_l + 1
					end
				end
			end
			if candidates_l > 0 then
				local hex = candidates[math.random(candidates_l)]
				if hex.unit ~= nil then
					-- TODO
					Map.unit_destroy(hex)
				end
				Map.unit_move(barbarian_hex, hex)
				hex.unit.action = false
			else
				barbarian_hex.unit.action = false
			end
		end
	end

	for hex in Map.iterate() do
		if hex.unit ~= nil then
			hex.unit.action = true
		end
		if hex.building ~= nil and hex.building_active  then
			update_resources(self, hex.building.production)
		end
	end
end

local function ChangeState(self, state)
	if self.state.destroy ~= nil then
		self.state.destroy(self)
	end
	
	self.state = state(self)
	
	if self.state.gui ~= nil then
		msg.post("gui", hash("render"), self.state.gui)
	else
		msg.post("gui", hash("render"), {})
	end
	if self.state.init ~= nil then
		self.state.init(self)
	end
end

local TILE_CLICK_MSG = hash("tile_click")
local END_TURN_CLICK_MSG = hash("end_turn_click")
local MOVE_ACTION_CLICK_MSG = hash("move_action_click")
local BUILD_ACTION_CLICK_MSG = hash("build_action_click")
local BACK_CLICK_MSG = hash("back_click")

local GameState = {
	Init = nil,
	Free = nil,
	WorkerAction = nil,
	WorkerBuild = nil,
	EnemyTurn = nil,
}

GameState.Init = function(self)
	self.resources = {
		food = 0,
		wood = 8,
		stone = 0
	}
	update_resources(self, {})
	Map.set_radius(2)
	Map.generate()
	self.focus = nil
	msg.post("camera", "use_projection", { projection = hash("FIXED_AUTO") })
	msg.post(".", "acquire_input_focus")
	return {}
end

GameState.Free = function(self)
	return {
		gui = {
			end_turn = END_TURN_CLICK_MSG
		},
		message_handler = {
			[TILE_CLICK_MSG] = function(self, message)
				local hex = Map.coordinates_to_hex[message.x][message.y]
				if hex.unit ~= nil and
				hex.unit.type == "workers" and 
				hex.unit.action then
					self.focus = hex
					ChangeState(self, GameState.WorkerAction)
				end
			end,
			[END_TURN_CLICK_MSG] = function(self, message)
				ChangeState(self, GameState.EnemyTurn)
			end,
		}
	}
end

GameState.WorkerAction = function(self)
	local gui = {
		end_turn = END_TURN_CLICK_MSG,
		action = {
			move = MOVE_ACTION_CLICK_MSG,
			build = BUILD_ACTION_CLICK_MSG,
			back = BACK_CLICK_MSG
		}
	}
	local message_handler = {
		[TILE_CLICK_MSG] = function(self, message)
			local hex = Map.coordinates_to_hex[message.x][message.y]
			if hex.unit ~= nil and hex.unit.type == "workers" then
				self.focus = hex
				ChangeState(self, GameState.WorkerAction)
			else
				self.focus = nil
				ChangeState(self, GameState.Free)
			end
		end,
		[MOVE_ACTION_CLICK_MSG] = function(self, message)
			ChangeState(self, GameState.WorkerMove)
		end,
		[BACK_CLICK_MSG] = function(self, message)
			ChangeState(self, GameState.Free)
		end,
		[BUILD_ACTION_CLICK_MSG] = function(self, message)
			ChangeState(self, GameState.WorkerBuild)
		end,
		[END_TURN_CLICK_MSG] = function(self, message)
			ChangeState(self, GameState.EnemyTurn)
		end,
	}

	--TODO потом возможно забабахать тут отдельно кнопку для апгрейдов, а пока так пусть будет
	
	return {
		gui = gui,
		message_handler = message_handler
	}
end

GameState.WorkerMove = function(self)
	local function is_move_option(self, hex)
		return Map.distance(self.focus, hex) == 1 and hex.unit == nil
	end
	return {
		init = function(self)
			for hex in Map.iterate() do
				hex.highlighted = is_move_option(self, hex)
			end
		end,
		destroy = function(self)
			for hex in Map.iterate() do
				hex.highlighted = false
			end
		end,
		gui = {
			action = {
				back = BACK_CLICK_MSG
			}
		},
		message_handler = {
			[TILE_CLICK_MSG] = function(self, message)
				local target = Map.coordinates_to_hex[message.x][message.y]
				if is_move_option(self, target) then
					self.focus.unit.action = false
					Map.unit_move(self.focus, target)
					ChangeState(self, GameState.Free)
				end
			end,
			[BACK_CLICK_MSG] = function(self, message)
				ChangeState(self, GameState.WorkerAction)
			end,
		}
	}
end

GameState.WorkerBuild = function(self)
	local gui = {
		action = {
			back = BACK_CLICK_MSG
		},
		build = {}
	}
	local message_handler = {
		[BACK_CLICK_MSG] = function(self, message)
			ChangeState(self, GameState.WorkerAction)
		end,
	}
	local options
	if self.focus.building == nil then
		options = self.focus.landscape.build_options
	else
		options = self.focus.building.build_options
	end
	if options ~= nil then
		for _, option in pairs(options) do
			gui.build[option] = hash(option)
			message_handler[hash(option)] = function(self, message)
				if check_cost(self, Building[option].cost) then
					spend_resources(self, Building[option].cost)
					self.focus.unit.action = false
					self.focus.building = Building[option]
					-- DEBUG !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					self.focus.building_active = true
					-- DEBUG !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					self.focus = nil
					ChangeState(self, GameState.Free)
				else
					print("resources requirements are not satisfied")
				end
			end
		end
	end
	return {
		gui = gui,
		message_handler = message_handler
	}
end

GameState.EnemyTurn = function(self)
	return {
		-- TODO message-based state chane
		init = function(self)
			enemy_turn(self)
			ChangeState(self, GameState.Free)
		end
	}
end

function init(self)
	self.state = GameState.Init(self)
	ChangeState(self, GameState.Free)
end

function update(self, dt)
	Map.update()
end

function on_message(self, message_id, message, sender)
	if self.state.message_handler ~= nil and self.state.message_handler[message_id] ~= nil then
		self.state.message_handler[message_id](self, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		local hex = Map.screen_to_hex(action.x, action.y)
		if hex ~= nil and hex.visible then
			msg.post(".", TILE_CLICK_MSG, {x = hex.x, y = hex.y})
		end
	end
end
