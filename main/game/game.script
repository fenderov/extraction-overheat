local Map = require "main/game/map"
local Heat = require "main/game/heat"
local Data = require "main/game/data"
local Content = require "main/game/content"

local function enemy_turn()
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "enemy" then
			hex.content.enemy_action = true
		end
	end
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "enemy" and hex.content.enemy_action then
			hex.content.action = false
			local candidates = {}
			local min_priority = 100
			for target in Data.iterate() do
				if (target.content == nil or target.content.type.team == "ally") and Map.distance(hex, target) <= 1 then
					local priority = 90
					for ally_hex in Data.iterate() do
						if ally_hex.content and ally_hex.content.type.team == "ally" then
							priority = math.min(Map.distance(target, ally_hex), priority)
						end
					end
					if priority < min_priority then
						min_priority = priority
						candidates = {}
						table.insert(candidates, target)
					end
					if priority == min_priority then
						table.insert(candidates, target)
					end
				end
			end
			hex.content.enemy_action = nil
			if #candidates > 0 then
				local target = candidates[math.random(#candidates)]
				if target.content then
					Map.content_attack(hex, target, 1)
				else
					Map.content_move(hex, target)
				end
			end
		end
	end
end

local function harvest_resources()
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "ally" then
			Map.content_apply_temp(hex)
			if hex.content then
				Map.content_norm_temp(hex)
				hex.content.temp = hex.content.temp + Data.get_heat() - 2
			end
		end
	end
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "ally" and hex.content.type.production then
			if hex.content.type.production.head[0] == "energy" and hex.content.power > 0 then
				for i, type in pairs(hex.content.type.production.head) do
					if i > 0 then
						local delta = hex.content.type.production[hex.content.power][i]
						if type == "cool" then
							for other in Data.iterate() do
								if Map.distance(hex, other) <= 1 and other.content then
									other.content.temp = other.content.temp - delta
								end
							end
						elseif type == "temp" then
							hex.content.temp = hex.content.temp + delta
						elseif type == "resource" then
							if hex.landscape.name ~= "empty" then
								Data.update_resources(hex.landscape.name, delta)
							end
						else
							Data.update_resources(type, delta)
						end
					end
				end
			end
		end
	end
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "ally" then
			Map.content_norm_temp(hex)
		end
	end
end

local function harvest_energy()
	Data.set_resources("energy", 0)
	Data.set_resources("max_energy", 0)
	for hex in Data.iterate() do
		if hex.content and hex.content.type.team == "ally" and hex.content.power ~= nil then
			Data.update_resources("energy", -hex.content.power)
		end
		if hex.content and hex.content.type.team == "ally" and hex.content.type.name == "solar" then
			local max_energy = hex.content.type.production[Data.get_heat()][1]
			Data.update_resources("max_energy", max_energy)
		end
	end
	Data.update_resources("energy", Data.get_resources().max_energy)
	if Data.get_resources().energy < 0 then
		for hex in Data.iterate() do
			if hex.content and hex.content.type.team == "ally" and hex.content.power ~= nil then
				hex.content.power = 0
			end
		end
		Data.set_resources("energy", Data.get_resources().max_energy)
	end
end

local function step_turn()
	Data.set_turn(Data.get_turn() + 1)
	if Data.get_turn() == 25 then
		msg.post("gui", hash("game_over"))
	end
	if Heat[Data.get_turn()] then
		Data.set_heat(Heat[Data.get_turn()].heat)
		local options = {}
		for i = 0, Heat.ENEMY_SPAWN_ZONE.size - 1 do
			table.insert(options, Heat.ENEMY_SPAWN_ZONE[i])
		end
		for _ = 1, Heat[Data.get_turn()].enemy.small do
			local i = math.random(#options)
			local pos = options[i]
			table.remove(options, i)
			Map.content_set(Data.get_hex(pos.x, pos.y), Content.enemy_small)
		end
		for _ = 1, Heat[Data.get_turn()].enemy.middle do
			local i = math.random(#options)
			local pos = options[i]
			table.remove(options, i)
			Map.content_set(Data.get_hex(pos.x, pos.y), Content.enemy_middle)
		end
		for _ = 1, Heat[Data.get_turn()].enemy.large do
			local i = math.random(#options)
			local pos = options[i]
			table.remove(options, i)
			Map.content_set(Data.get_hex(pos.x, pos.y), Content.enemy_large)
		end
	end
end

local action_target = nil


local function process_target(target)
	local name = Data.get_focus().content.type.actions[Data.get_selected_action()].type
	if name == "move" then
		if Map.is_move_target(target) then
			Data.update_resources("energy", -1)
			Map.content_move(Data.get_focus(), target)
			Data.set_focus(nil)
			msg.post("gui", hash("update_resources"))
			msg.post("gui", hash("focus"))
		end
	end
	if name == "shoot1" or name == "shoot2" then
		if Map.is_shoot_target(target) then
			action_target = target
			msg.post("gui", hash("target"))
			--upd healthbar
		end
	end
end

local function process_build(target)
	if Map.is_build_target(target) then
		Data.update_resources("metal", -Content[Data.get_to_build()].cost.metal)
		Map.content_set(target, Content[Data.get_to_build()])
		if Data.get_to_build() == "solar" then
			Data.update_resources("max_energy", Content.solar.production[Data.get_heat()][1])
			Data.update_resources("energy", Content.solar.production[Data.get_heat()][1])
		end
		Data.set_to_build(nil)
		Data.set_focus(nil)
		msg.post("gui", hash("update_resources"))
		msg.post("gui", hash("focus"))
	end
end

function init(self)
	math.randomseed(os.time())
	Map.set_scale(3)
	Map.generate()
	Map.content_set(Data.get_hex(0, 0), Content.rocket)
	Map.content_set(Data.get_hex(-2, 0), Content.solar)
	Map.content_set(Data.get_hex(1, 1), Content.drill)
	Data.set_resources("metal", 6)
	Data.set_resources("crystal", 0)
	Data.set_resources("max_energy", 0)
	Data.set_resources("energy", 0)
	harvest_energy()
	msg.post("camera", "use_projection", { projection = hash("FIXED_ZOOM") })
end

function update(self, dt)
	Map.update()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("released") then
		local hex = Map.screen_to_hex(message.x, message.y)
		if hex ~= nil and hex.visible then
			sound.play("#select_hex")
			if Data.get_to_build() and Data.get_awaiting_target() then
				process_build(hex)
			elseif Data.get_awaiting_target() then
				process_target(hex)
			else
				if hex == Data.get_focus() then
					Data.set_focus(nil)
				else
					Data.set_focus(hex)
				end
				msg.post("gui", hash("focus"))
			end
		end
	end
	
	-- TODO: TABLE FOR ACTIONS

	if message_id == hash("shoot1") then
		local focus = Data.get_focus()
		Data.update_resources("energy", -1)
		focus.content.temp = focus.content.temp + 1
		Map.content_shoot(focus, action_target, 2)
		action_target = nil
		msg.post("gui", hash("update_resources"))
		msg.post("gui", hash("focus"))
	end
	if message_id == hash("shoot2") then
		local focus = Data.get_focus()
		Data.update_resources("energy", -2)
		focus.content.temp = focus.content.temp + 2
		Map.content_shoot(focus, action_target, 5)
		action_target = nil
		msg.post("gui", hash("update_resources"))
		msg.post("gui", hash("focus"))
	end
	if message_id == hash("splash") then
		local focus = Data.get_focus()
		Data.update_resources("energy", -1)
		focus.content.temp = focus.content.temp + 1
		for target in Data.iterate() do
			if Map.is_splash_target(target) then
				Map.content_shoot(focus, target, 1)
			end
		end
		msg.post("gui", hash("update_resources"))
		msg.post("gui", hash("focus"))
	end
	if message_id == hash("end_turn") then
		enemy_turn()
		harvest_resources()
		step_turn()
		harvest_energy()
		msg.post("gui", hash("update_resources"))
		msg.post("gui", hash("focus"))
	end
	if message_id == hash("splash_impact") then
		-- TODO
	end
end
